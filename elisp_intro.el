;;; Package --- Summary

;;; Commentary:
;;; In this file, i am learning elisp coding, following the Intro to elisp from Emacs, accessible through C-h i.

;;; Code:

;;;
;;; Chapter 1
;;;

;;; set evaluates arguments and can therefore be used for string building
(set 'set-test-variable 'set-test-string)
(set set-test-variable "now, set-test-string should be set to this text")
(eval set-test-string) ; this prints "now, set-test-string should be set to this text"
;;; this is why setq normally is used, it automatically quotes the first argument
(setq setq-test-variable 'setq-test-string)
(setq setq-test-variable "now, set-test-string should be set to this text")
(eval setq-test-string) ; this should give an error, as the setq-test-variable above is not converted to setq-test-string and the evaled symbol therefore void
;;; Furthermore, setq can be used to bind multiple variables
(setq setq-test1 '(this is the first list)
      setq-test2 '(and this is the second))

;;; 1.11 Excecises
;;; Generate an error message by evaluating an appropriate symbol that is not within parentheses.
blub ; gives void variable error (if you not happened to use 'blub' as a variable somewhere)

;;; Generate an error message by evaluating an appropriate symbol that is between parentheses.
(blub) ; gives void function error (again, if you did not define it)


;;; Create a counter that increments by two rather than one.
(setq counter 0)
(setq counter (+ counter 2))

;;; Write an expression that prints a message in the echo area when evaluated.
(message "this is a %s expression that writes a message" "grammatically correct")


;;; Chapter 2
(+ 2 2)4 ; this was generated by C-u C-x C-e, which makes the result appear after the expression.



;;; Chapter 2

;;; 2.5 Exercises
;;; Find a file with which you are working and move towards its middle.
;;; Find its buffer name, file name, length, and your position in the file.
(buffer-name)
(buffer-file-name)
(buffer-size)
(point)


;;; Chapter 3
;;; if then else
(if (= 1 11)
    (message "yes, 1 = 1")
  (message "no, stupid, 1 != 1"))

(if (equal () nil)
    (message "() is nil")) ; an empty list is interpreted as nil

(message "We are %d characters into this buffer."
                   (- (point) ; start calculating the difference between the current point
                      (save-excursion ; save-excursion, sine the pointer will be moved to determin the point-min, which could be different from 1, in a narrowed buffer
                        (goto-char (point-min)) (point)))) ; move to the point-min, which is the smallest reachable point in this buffer and return the value


;;; 3.12 Excercises
;;; Write a non-interactive function that doubles the value of its argument, a number.  Make that function interactive.
(defun double-number (number)
  "A function to double a NUMBER."
  (interactive "p")
  (message "Doubling %d results in %d"
	   number
	   (* number 2)))

(double-number 3)6 ; evaluated before making it interactive

;;; Write a function that tests whether the current value of 'fill-column' is greater than the argument passed to the function and if so, prints an appropriate message.
(fill-column)
(defun test-fill-column-value (number)
  "This function tests whether the value of `fill-column' is greater than NUMBER."
  (interactive "p")
  (if (> fill-column number)
      (message "Fill-column: %d is greater than the number %d"
	       fill-column
	       number)
    (message "no, it is smaller"))
  )

(provide 'elisp_intro)
;;; elisp_intro.el ends here
